{
  "version": 3,
  "sources": ["../typescript/captcha/encryption.ts", "../typescript/captcha/ciphers.ts", "../typescript/captcha/security.ts", "../typescript/captcha/handler.ts", "../typescript/captcha/index.ts"],
  "sourcesContent": ["/**\n * Encryption utilities for CAPTCHA security\n * Implements three layers of encryption for maximum security\n */\n\n// Layer 1: AES Encryption utility (first encryption layer)\nexport class AESCrypto {\n    // The key is injected but obfuscated\n    private static readonly KEY_PARTS = [\n        'ES_dd54', '29744a', 'f34f03', '93bddb', 'c3b3f4', '491a'\n    ];\n    \n    private static getKey(): string {\n        // Dynamically reconstruct the key to avoid direct storage\n        return this.KEY_PARTS.join('');\n    }\n    \n    // Simple AES encryption implementation\n    static encrypt(text: string): string {\n        try {\n            // This is a simplified version - in production would use Web Crypto API\n            const key = this.getKey();\n            let result = '';\n            for (let i = 0; i < text.length; i++) {\n                const charCode = text.charCodeAt(i) ^ key.charCodeAt(i % key.length);\n                result += String.fromCharCode(charCode);\n            }\n            // Convert to base64 for storage\n            return btoa(result);\n        } catch (e) {\n            console.error('Encryption error', e);\n            return text; // Fallback to plaintext on error\n        }\n    }\n    \n    static decrypt(encrypted: string): string {\n        try {\n            // Decode from base64\n            const text = atob(encrypted);\n            const key = this.getKey();\n            let result = '';\n            for (let i = 0; i < text.length; i++) {\n                const charCode = text.charCodeAt(i) ^ key.charCodeAt(i % key.length);\n                result += String.fromCharCode(charCode);\n            }\n            return result;\n        } catch (e) {\n            console.error('Decryption error', e);\n            return encrypted; // Return encrypted text on error\n        }\n    }\n}\n", "/**\n * Additional encryption ciphers for CAPTCHA security\n * Implements XOR and Caesar cipher encryption layers\n */\n\n// Layer 2: XOR Encryption (second encryption layer)\nexport class XORCrypto {\n    // XOR key derived from main key\n    private static readonly XOR_KEY = 'c3b3f4491aES_dd5429744af34f0393bddb';\n    \n    static encrypt(text: string): string {\n        let result = '';\n        for (let i = 0; i < text.length; i++) {\n            const charCode = text.charCodeAt(i) ^ this.XOR_KEY.charCodeAt(i % this.XOR_KEY.length);\n            result += String.fromCharCode(charCode);\n        }\n        return result;\n    }\n    \n    static decrypt(text: string): string {\n        // XOR is symmetric, so encryption and decryption are the same\n        return this.encrypt(text);\n    }\n}\n\n// Layer 3: Caesar Cipher (third encryption layer)\nexport class CaesarCipher {\n    // Shift value derived from key\n    private static readonly SHIFT = 13; // Derived from key hash\n    \n    static encrypt(text: string): string {\n        let result = '';\n        for (let i = 0; i < text.length; i++) {\n            const char = text.charAt(i);\n            if (char.match(/[a-zA-Z]/)) {\n                const code = text.charCodeAt(i);\n                // Uppercase letters\n                if (code >= 65 && code <= 90) {\n                    result += String.fromCharCode(((code - 65 + this.SHIFT) % 26) + 65);\n                }\n                // Lowercase letters\n                else if (code >= 97 && code <= 122) {\n                    result += String.fromCharCode(((code - 97 + this.SHIFT) % 26) + 97);\n                }\n            } else {\n                result += char;\n            }\n        }\n        return result;\n    }\n    \n    static decrypt(text: string): string {\n        let result = '';\n        for (let i = 0; i < text.length; i++) {\n            const char = text.charAt(i);\n            if (char.match(/[a-zA-Z]/)) {\n                const code = text.charCodeAt(i);\n                // Uppercase letters\n                if (code >= 65 && code <= 90) {\n                    result += String.fromCharCode(((code - 65 - this.SHIFT + 26) % 26) + 65);\n                }\n                // Lowercase letters\n                else if (code >= 97 && code <= 122) {\n                    result += String.fromCharCode(((code - 97 - this.SHIFT + 26) % 26) + 97);\n                }\n            } else {\n                result += char;\n            }\n        }\n        return result;\n    }\n}\n", "/**\n * Security services for CAPTCHA implementation\n * Combines encryption layers and provides secure storage\n */\n\nimport { AESCrypto } from './encryption';\nimport { XORCrypto, CaesarCipher } from './ciphers';\n\n// Main encryption service that combines all three layers\nexport class TripleEncryption {\n    static encrypt(data: string): string {\n        // Apply all three encryption methods in sequence\n        const caesarEncrypted = CaesarCipher.encrypt(data);\n        const xorEncrypted = XORCrypto.encrypt(caesarEncrypted);\n        const aesEncrypted = AESCrypto.encrypt(xorEncrypted);\n        return aesEncrypted;\n    }\n    \n    static decrypt(encrypted: string): string {\n        // Reverse the encryption process\n        const aesDecrypted = AESCrypto.decrypt(encrypted);\n        const xorDecrypted = XORCrypto.decrypt(aesDecrypted);\n        const caesarDecrypted = CaesarCipher.decrypt(xorDecrypted);\n        return caesarDecrypted;\n    }\n}\n\n// Secure storage for sensitive data\nexport class SecureStorage {\n    private static readonly PREFIX = 'secure_captcha_';\n    \n    static store(key: string, value: string): void {\n        const encryptedValue = TripleEncryption.encrypt(value);\n        localStorage.setItem(this.PREFIX + key, encryptedValue);\n    }\n    \n    static retrieve(key: string): string | null {\n        const encryptedValue = localStorage.getItem(this.PREFIX + key);\n        if (!encryptedValue) return null;\n        return TripleEncryption.decrypt(encryptedValue);\n    }\n    \n    static clear(key: string): void {\n        localStorage.removeItem(this.PREFIX + key);\n    }\n}\n", "/**\n * Main CAPTCHA handler implementation\n * Manages CAPTCHA verification with triple-layer encryption security\n */\n\nimport { TripleEncryption, SecureStorage } from './security';\n\n// TypeScript interfaces and types for type safety\ninterface ICaptchaConfig {\n    siteKey: string;\n    onVerify: (token: string) => void;\n    onExpire: () => void;\n    onError: (err: Error) => void;\n}\n\ntype CaptchaStatus = 'pending' | 'verified' | 'expired' | 'error';\n\n// The main CAPTCHA handler class with enhanced security\nexport class SecureCaptchaHandler {\n    private captchaContainer: HTMLElement | null;\n    private captchaStatus: CaptchaStatus;\n    private onCaptchaVerifiedCallback: ((token: string) => void) | null;\n    \n    // Encrypted site key - will be decrypted at runtime\n    private readonly encryptedSiteKey: string;\n    \n    constructor() {\n        this.captchaContainer = document.getElementById('captcha-container');\n        this.captchaStatus = 'pending';\n        this.onCaptchaVerifiedCallback = null;\n        \n        // Store the site key in encrypted form\n        // In production, this would be fetched from a secure API\n        const testSiteKey = '10000000-ffff-ffff-ffff-000000000001';\n        this.encryptedSiteKey = TripleEncryption.encrypt(testSiteKey);\n        \n        // Anti-tampering check\n        this.initSecurityMonitoring();\n    }\n    \n    // Initialize security monitoring to detect tampering\n    private initSecurityMonitoring(): void {\n        // Store a checksum of critical functions\n        const securityChecksum = this.calculateChecksum([\n            this.init.toString(),\n            this.show.toString(),\n            this.hide.toString(),\n            this.reset.toString(),\n            this.onVerify.toString(),\n            this.isVerified.toString()\n        ]);\n        \n        SecureStorage.store('security_checksum', securityChecksum);\n        \n        // Periodically verify integrity\n        setInterval(() => {\n            const currentChecksum = this.calculateChecksum([\n                this.init.toString(),\n                this.show.toString(),\n                this.hide.toString(),\n                this.reset.toString(),\n                this.onVerify.toString(),\n                this.isVerified.toString()\n            ]);\n            \n            const storedChecksum = SecureStorage.retrieve('security_checksum');\n            \n            if (storedChecksum !== currentChecksum) {\n                console.error('Security breach detected: Code tampering detected');\n                // In production, this would trigger additional security measures\n                this.captchaStatus = 'error';\n                this.reportSecurityBreach();\n            }\n        }, 5000); // Check every 5 seconds\n    }\n    \n    // Calculate a simple checksum for integrity verification\n    private calculateChecksum(items: string[]): string {\n        const concatenated = items.join('');\n        let hash = 0;\n        for (let i = 0; i < concatenated.length; i++) {\n            const char = concatenated.charCodeAt(i);\n            hash = ((hash << 5) - hash) + char;\n            hash = hash & hash; // Convert to 32bit integer\n        }\n        return hash.toString(16);\n    }\n    \n    // Report security breach to monitoring system\n    private reportSecurityBreach(): void {\n        // In production, this would send an alert to a security monitoring system\n        const breachData = {\n            timestamp: new Date().toISOString(),\n            userAgent: navigator.userAgent,\n            location: window.location.href\n        };\n        \n        // Encrypt breach data before storing/sending\n        const encryptedData = TripleEncryption.encrypt(JSON.stringify(breachData));\n        SecureStorage.store('security_breach', encryptedData);\n        \n        // Optionally send to server\n        // this.sendSecurityAlert(encryptedData);\n    }\n    \n    /**\n     * Initialize the CAPTCHA\n     * @param callback - Function to call when CAPTCHA is verified\n     */\n    init(callback: (token: string) => void): void {\n        this.onCaptchaVerifiedCallback = callback;\n        \n        // Create hCaptcha script if it doesn't exist\n        if (!document.getElementById('hcaptcha-script')) {\n            const script = document.createElement('script');\n            script.id = 'hcaptcha-script';\n            script.src = 'https://js.hcaptcha.com/1/api.js';\n            script.async = true;\n            script.defer = true;\n            document.head.appendChild(script);\n            \n            // Store script loading time for anomaly detection\n            SecureStorage.store('script_load_time', new Date().toISOString());\n        }\n        \n        // Update hCaptcha site key with decrypted value\n        const hcaptchaElement = document.querySelector('.h-captcha') as HTMLElement;\n        if (hcaptchaElement) {\n            const decryptedSiteKey = TripleEncryption.decrypt(this.encryptedSiteKey);\n            hcaptchaElement.setAttribute('data-sitekey', decryptedSiteKey);\n        }\n    }\n    \n    /**\n     * Show the CAPTCHA\n     */\n    show(): void {\n        if (this.captchaContainer) {\n            this.captchaContainer.style.display = 'flex';\n            this.captchaStatus = 'pending';\n            \n            // Log showing time securely\n            SecureStorage.store('captcha_shown', new Date().toISOString());\n        }\n    }\n    \n    /**\n     * Hide the CAPTCHA\n     */\n    hide(): void {\n        if (this.captchaContainer) {\n            this.captchaContainer.style.display = 'none';\n            \n            // Log hiding time securely\n            SecureStorage.store('captcha_hidden', new Date().toISOString());\n        }\n    }\n    \n    /**\n     * Reset the CAPTCHA\n     */\n    reset(): void {\n        this.captchaStatus = 'pending';\n        if (window.hcaptcha) {\n            window.hcaptcha.reset();\n            \n            // Log reset time securely\n            SecureStorage.store('captcha_reset', new Date().toISOString());\n        }\n    }\n    \n    /**\n     * Callback for when CAPTCHA is verified\n     * @param token - The verification token\n     */\n    onVerify(token: string): void {\n        // Verify token hasn't been tampered with\n        if (!token || token.length < 10) {\n            console.error('Invalid token format');\n            this.captchaStatus = 'error';\n            return;\n        }\n        \n        // Store token securely\n        SecureStorage.store('last_token', token);\n        \n        this.captchaStatus = 'verified';\n        \n        // Show success message\n        const successToast = (window as any).Toast.makeText(\n            document.body, \n            'CAPTCHA verification successful', \n            (window as any).Toast.LENGTH_SHORT\n        );\n        \n        successToast.setStyle((window as any).Toast.STYLE_SUCCESS)\n                   .setPosition((window as any).Toast.POSITION_BOTTOM_CENTER)\n                   .setAnimation((window as any).Toast.WAVE_IN, (window as any).Toast.WAVE_OUT)\n                   .show();\n        \n        // Hide the CAPTCHA container\n        this.hide();\n        \n        // Call the callback if provided\n        if (typeof this.onCaptchaVerifiedCallback === 'function') {\n            this.onCaptchaVerifiedCallback(token);\n        }\n    }\n    \n    /**\n     * Callback for when CAPTCHA verification expires\n     */\n    onExpire(): void {\n        this.captchaStatus = 'expired';\n        \n        // Show expiration message\n        const errorToast = (window as any).Toast.makeText(\n            document.body, \n            'CAPTCHA verification expired, please verify again', \n            (window as any).Toast.LENGTH_SHORT\n        );\n        \n        errorToast.setStyle((window as any).Toast.STYLE_WARNING)\n                 .setPosition((window as any).Toast.POSITION_BOTTOM_CENTER)\n                 .show();\n        \n        // Show the CAPTCHA again\n        this.show();\n        \n        // Log expiration securely\n        SecureStorage.store('captcha_expired', new Date().toISOString());\n    }\n    \n    /**\n     * Callback for when CAPTCHA encounters an error\n     * @param err - The error object\n     */\n    onError(err: Error): void {\n        console.error('CAPTCHA error:', err);\n        this.captchaStatus = 'error';\n        \n        // Show error message\n        const errorToast = (window as any).Toast.makeText(\n            document.body, \n            'CAPTCHA verification failed, please try again', \n            (window as any).Toast.LENGTH_SHORT\n        );\n        \n        errorToast.setStyle((window as any).Toast.STYLE_ERROR)\n                 .setPosition((window as any).Toast.POSITION_BOTTOM_CENTER)\n                 .show();\n        \n        // Reset the CAPTCHA\n        this.reset();\n        \n        // Log error securely\n        SecureStorage.store('captcha_error', JSON.stringify({\n            message: err.message,\n            time: new Date().toISOString()\n        }));\n    }\n    \n    /**\n     * Check if CAPTCHA is verified\n     * @returns Whether CAPTCHA is verified\n     */\n    isVerified(): boolean {\n        return this.captchaStatus === 'verified';\n    }\n}\n", "/**\n * Main entry point for the CAPTCHA module\n * Exports the SecureCaptchaHandler and initializes global instance\n */\n\nimport { SecureCaptchaHandler } from './handler';\n\n\n// The ICaptchaHandler interface is already defined in types.d.ts\n// We don't need to redefine it here\n\n// The Window interface is already defined in types.d.ts\n// We don't need to redeclare it here\n\n// Create and expose the secure captcha handler\nwindow.captchaHandler = new SecureCaptchaHandler();\n\n// Set up global callback functions for hCaptcha\nwindow.onCaptchaVerify = (token: string) => {\n    if (window.captchaHandler) {\n        window.captchaHandler.onVerify(token);\n    }\n};\n\nwindow.onCaptchaExpire = () => {\n    if (window.captchaHandler) {\n        window.captchaHandler.onExpire();\n    }\n};\n\nwindow.onCaptchaError = (err: Error) => {\n    if (window.captchaHandler) {\n        window.captchaHandler.onError(err);\n    }\n};\n\n// Export for TypeScript module support\nexport default SecureCaptchaHandler;\n"],
  "mappings": "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",
  "names": []
}
